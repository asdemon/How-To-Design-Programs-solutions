;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-reader.ss" "lang")((modname ex213) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/batch-io)

; On OS X: 
(define DICTIONARY-LOCATION "/usr/share/dict/words")
; A Dictionary is a List-of-strings.
(define DICTIONARY-AS-LIST (read-lines DICTIONARY-LOCATION))


; A Letter is one of the following 1Strings: 
; – "a"
; – ... 
; – "z"
; or, equivalently, a member? of this list: 
(define LETTERS
  (explode "abcdefghijklmnopqrstuvwxyz"))

; String -> Word
; convert s to the chosen word representation
(check-expect (string->word "ab")
              (list "a" "b"))
(check-expect (string->word "")
              '())
(define (string->word s)
  (explode s))
 
; Word -> String
; convert w to a string
(define (word->string w)
  (implode w))

; List-of-words -> List-of-strings
; turn all Words in low into Strings
(check-expect (words->strings '())
              '())
(check-expect (words->strings (list (list "a" "b") '()))
             `("ab", ""))
(define (words->strings low)
  (cond
    ((empty? low) '())
    (else (cons (word->string (first low))
                (words->strings (rest low))))))


; List-of-strings -> List-of-strings
; pick out all those Strings that occur in the dictionary 
(define (in-dictionary los)
  (cond
    ((empty? los) '())
    (else (if (exist-in-dictionary? (first los) DICTIONARY-AS-LIST)
                (cons (first los) (in-dictionary (rest los)))
                (in-dictionary (rest los))))))
; string, List-of-strings -> boolean
; return string is in List-of-strings or not
(check-expect (exist-in-dictionary? "acephaline" DICTIONARY-AS-LIST)
             #t)
(define (exist-in-dictionary? s l)
  (cond
    ((empty? l) #f)
    (else (or (string=? s (first l))
              (exist-in-dictionary? s (rest l))))))